buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    ivy {
        setUrl('https://download.nodecdn.net/containers/reforged/server/release')
        metadataSources {
            artifact()
        }
        patternLayout {
            artifact('[revision]/[artifact].[ext]')
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly 'pixelmon:Pixelmon-1.16.5-9.1.11-server:9.1.11'
    shadow 'com.zaxxer:HikariCP:5.1.0'
}

shadowJar {
    configurations = [project.configurations.shadow]

    zip64 = true
    setArchiveClassifier('')
    setArchiveBaseName("${rootProject.name}")

    relocate('com.zaxxer', 'me.gt86.sync.shade.hikari')
    relocate('org.slf4j', 'me.gt86.sync.shade.slf4j')
    relocate('com.envyful.api', 'me.gt86.sync.shade.envy.api')
    relocate('org.bstats', 'me.gt86.sync.shade.bstats')
    relocate('io.netty', 'me.gt86.sync.shade.netty')
    relocate('io.lettuce', 'me.gt86.sync.shade.lettuce')
    relocate('com.cronutils', 'me.gt86.sync.shade.cronutils')
    relocate('com.sun.el', 'me.gt86.sync.shade.sun.el')
    relocate('org.reactivestreams', 'me.gt86.sync.shade.reactivestreams')
    relocate('reactor', 'me.gt86.sync.shade.reactor')
    relocate('org.apache.commons.jexl', 'me.gt86.sync.shade.jexl3')
    relocate('google.protobuf', 'me.gt86.sync.shade.protobuf')
    relocate('jakarta.el', 'me.gt86.sync.shade.jakarta.el')
    relocate('org.xerial.snappy', 'me.gt86.sync.shade.snappy')

    exclude "com/google/**"
    exclude "javax/**"
    exclude "**/module-info.class"
    exclude "**/*.xml"
    exclude "**/Log4j-charsets.properties"
    exclude "META-INF/versions/9/**"
    exclude "META-INF/native-image/**"
    exclude "META-INF/services/**"
    exclude "META-INF/**/*.properties"
    exclude "META-INF/maven"
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'shadowJar'
}

shadowJar.finalizedBy('reobfJar')



tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
